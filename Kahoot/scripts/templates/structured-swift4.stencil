// swiftlint:disable all
// swiftformat:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
        _ p{{forloop.counter}}: {{type}}{{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
        {% if type == "UnsafeRawPointer" %}
        Int(bitPattern: p{{forloop.counter}})
        {% else %}
        p{{forloop.counter}}
        {% endif %}
        {{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
    {% for string in item.strings %}
    {% if not param.noComments %}
    /// {{string.translation}}
    {% endif %}
    {% if string.translation|hasPrefix:"Plural format key:" %}
    {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}(_ args: CVarArg...) -> Localizeable {
        return Localizeable("{{table}}", "{{string.key}}", arguments: args)
    }
    {% elif string.types %}
    {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> Localizeable {
        return Localizeable("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
    }
    {% else %}
    {{accessModifier}} static let {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = Localizeable("{{table}}", "{{string.key}}")
    {% endif %}
    {% endfor %}
    {% for child in item.children %}

    {{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}
            {% call recursiveBlock table child %}
        {% endfilter %}
    }
    {% endfor %}
{% endmacro %}
// swiftlint:disable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:disable nesting type_body_length type_name
{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
{{accessModifier}} enum {{enumName}} {
    {% if tables.count > 1 %}
    {% for table in tables %}
    {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}
            {% call recursiveBlock table.name table.levels %}
        {% endfilter %}
    }
    {% endfor %}
    {% else %}
        {% call recursiveBlock tables.first.name tables.first.levels %}
    {% endif %}
}
// swiftlint:enable explicit_type_interface function_parameter_count identifier_name line_length
// swiftlint:enable nesting type_body_length type_name

// MARK: - Implementation Details

{{accessModifier}} struct Localizeable {

    {{accessModifier}} var appLocalized: String {
        switch Constants.language {
        case .english:
            return String(format: formatFor(language: "en"), arguments: arguments)
        case.norwegian:
            return String(format: formatFor(language: "nb"), arguments: arguments)
        }
    }
    

    {{accessModifier}} var localized: String {
        return String(format: format, locale: Locale.current, arguments: arguments)
    }

    {{accessModifier}} var en: String {
        return String(format: formatFor(language: "en"), arguments: arguments)
    }

    {{accessModifier}} var nb: String {
        return String(format: formatFor(language: "nb"), arguments: arguments)
    }

    private var format: String {
        return BundleToken.bundle.localizedString(forKey: key, value: nil, table: table)
    }

    private let arguments: [CVarArg]
    private let key: String
    private let table: String

    init(_ table: String, _ key: String, _ args: CVarArg...) {
        self.arguments = args
        self.key = key
        self.table = table
    }

    init(_ table: String, _ key: String, arguments: [CVarArg]) {
        self.arguments = arguments
        self.key = key
        self.table = table
    }

    private func formatFor(language: String) -> String {
        guard
            let path = BundleToken.bundle.path(forResource: language, ofType: "lproj"),
            let bundle = Bundle(path: path)
        else { return format }
        return bundle.localizedString(forKey: key, value: nil, table: table)
    }

}

private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
    return Bundle.module
    #else
    return Bundle(for: BundleToken.self)
    #endif
  }()
}
{% else %}
// No string found
{% endif %}
